@page "/settings"

@using ToiletPaperTracker.Contracts.Interfaces
@using System.Linq
@inject IToiletService ToiletService
@inject IJSRuntime JsRuntime;

<div class="container">
    <div class="row">
        <div class="col-lg-12">
            <h2 class="mt-5">Settings</h2>
            <p>
                <label for="numberOfToiletPaperRollsRemaining">
                    <span>Number of toilet paper rolls remaining:</span>
                    <input id="tbNumberOfToiletPaperRollsRemaining" type="text" name="numberOfToiletPaperRollsRemaining" @bind="NumberOfToiletPaperRollsRemaining" @oninput="OnNumberOfToiletPaperRollsRemainingChanged">
                </label>
            </p>
            <p>
                <label for="addUsageDate">
                    <span>Add Usage Date:</span>
                    <input id="tbAddUsage" type="date" name="addUsageDate" @bind="AddDataPointDate">
                </label>
                <button class="btn btn-primary" @onclick="AddDataPoint">
                    Add Usage Date
                </button>
            </p>
            <p>
                <h3>Usage Dates</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var data in UsageDataPoints)
                        {
                            <tr>
                                <td>@data.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-primary"
                                            @onclick="@(e => DeleteDataPoint(e, @data))">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </p>
        </div>
    </div>
</div>

@code
{
    private DateTime? AddDataPointDate;

    private int NumberOfToiletPaperRollsRemaining;

    private IEnumerable<DateTime> UsageDataPoints = new List<DateTime>();

    protected override async Task OnInitializedAsync()
    {
        UsageDataPoints = await ToiletService.GetDataPoints();
        NumberOfToiletPaperRollsRemaining = await ToiletService.GetNumberOfRollsRemaining();        
    }

    private async Task DeleteDataPoint(MouseEventArgs e, DateTime date)
    {
        await ToiletService.RemoveUsageData(date);
        UsageDataPoints = await ToiletService.GetDataPoints();
    }

    private async Task AddDataPoint()
    {
        try
        {
            if (AddDataPointDate == null)
                await JsRuntime.InvokeAsync<bool>("alert", "Date required.");

            await ToiletService.AddUsageData(AddDataPointDate.Value);
            UsageDataPoints = await ToiletService.GetDataPoints();
        }
        catch (Exception ex)
        {
            //todo: implement proper error messaging
            await JsRuntime.InvokeAsync<bool>("alert", "Unable to save data point.");

            await JsRuntime.InvokeAsync<bool>("console.log", $"Unable to save data point: {ex.ToString()}");
        }
    }

    private async Task OnNumberOfToiletPaperRollsRemainingChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var newValue))
        {
            await ToiletService.UpdateNumberOfRollsRemaining(newValue);
        }
    }
}